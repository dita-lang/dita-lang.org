name: content-model
inputs:
  INPUT:
    required: true
  OUTPUT:
    required: true
  DIR:
    required: true
  MAP:
    required: true
  PREFIX:
    required: false
    default: ''
  SCHEMAS:
    required: true
runs:
  using: 'composite'
  steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    - name: Generate content models
      shell: bash
      run: |
        elementSuffix=".element"
        elementPrefix="${{ inputs.PREFIX }}"
        for schema in $(echo "${{ inputs.SCHEMAS }}" | tr ':' '\n'); do
          #dir="$(dirname ${schema})"
          file="$(basename ${schema})"
          gradle \
            -Pinput="../${{ inputs.INPUT }}/${schema}" \
            -Poutput="../${{ inputs.DIR }}/${file%%.rng}.dita" \
            -Pschema="${file}" \
            -Pelement-suffix="${elementSuffix}" \
            -Pelement-prefix="${elementPrefix}"
        done
        echo "Generated:"
        ls ../${{ inputs.DIR }}
      working-directory: dita-lang
    - name: Insert content models
      shell: bash
      run: |
        # Insert to topics
        #for output in $(echo "${{ inputs.OUTPUT }}" | tr ':' '\n'); do
        output=${{ inputs.OUTPUT }}
        dir=$(basename ${output})
        cd $output
        for i in *.dita; do
          name=${i%%.*}
          name=${name##${{ inputs.PREFIX }}}
          echo "$i $name"
          perl -pi.bak -e 's/<!--(<section id="attributes"><title>Attributes<\/title><p conkeyref="reuse-attributes\/no-atts"\/><\/section>)-->/\1/g' "$i"
          perl -pi.bak -e "s/((\s*)<section(?:\s+[\w-]+=[\"'].+?[\"'])*(\s+id=\"attributes\")(?:\s+[\w-]+=[\"'].+?[\"'])*+\s*\/?>)/\2<section conkeyref=\"content-models-${name}\/${name}.element\" id=\"content-model\"\/>\n<section conkeyref=\"inheritance-${name}\/${name}.inheritance\" id=\"inheritance\"\/>\1/" "$i"
          rm "$i.bak"
        done
        cd -
        #done
        # Insert to map
        for schema in $(echo "${{ inputs.SCHEMAS }}" | tr ':' '\n'); do
          file="$(basename ${schema})"
          name=${file%%.rng}
          perl -pi.bak -e "s/(<\/map>)/  <mapref href='content-models\/${name}.ditamap'\/>\n\1/" "${{ inputs.MAP }}"
          rm "${{ inputs.MAP }}.bak"
        done
        #git status
        #git diff -- "${{ inputs.MAP }}"
      #working-directory: ${{ inputs.OUTPUT }}
